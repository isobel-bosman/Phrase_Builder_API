// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sentence.Builder.Persistence;

#nullable disable

namespace Sentence.Builder.Persistence.Migrations
{
    [DbContext(typeof(SentenceContext))]
    [Migration("20230219165026_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sentence.Builder.Domain.Entities.PartOfSpeechEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("(SYSDATETIMEOFFSET())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Description");

                    b.Property<string>("PartOfSpeech")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("PartOfSpeech");

                    b.HasKey("Id");

                    b.ToTable("PartOfSpeech", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11c261a1-c620-49ad-8239-18fd1b7edcb9"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Adjective",
                            PartOfSpeech = "ADJ"
                        },
                        new
                        {
                            Id = new Guid("263b6887-e033-467f-a431-d08bfe68143c"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Preposition",
                            PartOfSpeech = "ADP"
                        },
                        new
                        {
                            Id = new Guid("2890e295-9d27-4d6f-a49d-225cf6b0d806"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Adverb",
                            PartOfSpeech = "ADV"
                        },
                        new
                        {
                            Id = new Guid("2e501489-e32b-41c0-b550-159e72e64a3f"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Conjunction",
                            PartOfSpeech = "CONJ"
                        },
                        new
                        {
                            Id = new Guid("0e92fd95-9627-4b2c-9b37-9c8a68866d94"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Determiner",
                            PartOfSpeech = "DET"
                        },
                        new
                        {
                            Id = new Guid("f36bd21f-12fd-4072-bdcd-8b8b73ae0583"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Noun",
                            PartOfSpeech = "NOUN"
                        },
                        new
                        {
                            Id = new Guid("9b074e51-5657-4955-8194-7c6b6b2aa531"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Numeral",
                            PartOfSpeech = "NUM"
                        },
                        new
                        {
                            Id = new Guid("46c69f36-3c6f-4554-b172-99b1cb01c893"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Particle",
                            PartOfSpeech = "PRT"
                        },
                        new
                        {
                            Id = new Guid("558bb598-c38f-493c-89c4-76db7860f466"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Pronoun",
                            PartOfSpeech = "PRON"
                        },
                        new
                        {
                            Id = new Guid("f72f86bf-149b-4114-94a0-4bdc1ec4fc47"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Verb",
                            PartOfSpeech = "VERB"
                        },
                        new
                        {
                            Id = new Guid("eec0e07d-88e6-4a7c-8a3d-07bd369ff1d2"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Exclamation",
                            PartOfSpeech = "EXC"
                        },
                        new
                        {
                            Id = new Guid("7d2f7dd3-cf94-4357-8a66-9f9b84bdbe5b"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Punctuation Mark",
                            PartOfSpeech = "."
                        },
                        new
                        {
                            Id = new Guid("5e48e8d4-c7a5-4bae-8e0a-fa0bf0558909"),
                            CreatedOn = new DateTimeOffset(new DateTime(2023, 2, 19, 12, 13, 50, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Other",
                            PartOfSpeech = "X"
                        });
                });

            modelBuilder.Entity("Sentence.Builder.Domain.Entities.SentenceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("(SYSDATETIMEOFFSET())");

                    b.HasKey("Id");

                    b.ToTable("Sentences", "dbo");
                });

            modelBuilder.Entity("Sentence.Builder.Domain.Entities.WordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("(SYSDATETIMEOFFSET())");

                    b.Property<Guid>("PartOfSpeechEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Word");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechEntityId");

                    b.ToTable("Words", "dbo");
                });

            modelBuilder.Entity("SentenceEntityWordEntity", b =>
                {
                    b.Property<Guid>("SentenceEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WordsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SentenceEntityId", "WordsId");

                    b.HasIndex("WordsId");

                    b.ToTable("SentenceEntityWordEntity", "dbo");
                });

            modelBuilder.Entity("Sentence.Builder.Domain.Entities.WordEntity", b =>
                {
                    b.HasOne("Sentence.Builder.Domain.Entities.PartOfSpeechEntity", "PartOfSpeechEntity")
                        .WithMany()
                        .HasForeignKey("PartOfSpeechEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartOfSpeechEntity");
                });

            modelBuilder.Entity("SentenceEntityWordEntity", b =>
                {
                    b.HasOne("Sentence.Builder.Domain.Entities.SentenceEntity", null)
                        .WithMany()
                        .HasForeignKey("SentenceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sentence.Builder.Domain.Entities.WordEntity", null)
                        .WithMany()
                        .HasForeignKey("WordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
